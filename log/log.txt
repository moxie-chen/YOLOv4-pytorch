[2021-06-28 11:00:16,883]-[train.py line:149]:Training start,img size is: 416,batchsize is: 1,work number is 0 
[2021-06-28 11:00:16,883]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): CSPDarknet53(
      (stem_conv): Convolutional(
        (_Convolutional__conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (_Convolutional__activate): Mish()
      )
      (stages): ModuleList(
        (0): CSPFirstStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (1): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (2): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (3): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (4): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): Convolutional(
              (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-06-28 11:00:16,901]-[train.py line:154]:Train datasets number is : 16551 
[2021-06-28 11:00:16,902]-[train.py line:162]:        =======  start  training   ======      
[2021-06-28 11:00:16,903]-[train.py line:168]:===Epoch:[0/50]=== 
[2021-06-28 11:00:18,388]-[train.py line:235]:  === Epoch:[  0/50],step:[  0/16550],img_size:[416],total_loss:1868.1722|loss_ciou:1.5601|loss_conf:1840.0916|loss_cls:26.5207|lr:0.0000 
[2021-06-28 11:00:21,004]-[train.py line:235]:  === Epoch:[  0/50],step:[ 10/16550],img_size:[384],total_loss:1915.3331|loss_ciou:8.1937|loss_conf:1804.9441|loss_cls:102.1954|lr:0.0000 
[2021-07-01 14:45:01,045]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-01 14:45:01,045]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): CSPDarknet53(
      (stem_conv): Convolutional(
        (_Convolutional__conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (_Convolutional__activate): Mish()
      )
      (stages): ModuleList(
        (0): CSPFirstStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (1): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (2): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (3): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (4): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): Convolutional(
              (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-01 14:45:01,057]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-01 14:45:01,057]-[train.py line:162]:        =======  start  training   ======      
[2021-07-01 14:45:01,059]-[train.py line:168]:===Epoch:[0/50]=== 
[2021-07-01 14:47:22,223]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-01 14:47:22,224]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): CSPDarknet53(
      (stem_conv): Convolutional(
        (_Convolutional__conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (_Convolutional__activate): Mish()
      )
      (stages): ModuleList(
        (0): CSPFirstStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (1): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (2): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (3): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (4): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): Convolutional(
              (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-01 14:47:22,234]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-01 14:47:22,235]-[train.py line:162]:        =======  start  training   ======      
[2021-07-01 14:47:22,236]-[train.py line:168]:===Epoch:[0/50]=== 
[2021-07-01 14:47:33,385]-[train.py line:235]:  === Epoch:[  0/50],step:[  0/16550],img_size:[608],total_loss:3964.8376|loss_ciou:1.9140|loss_conf:3935.1111|loss_cls:27.8126|lr:0.0000 
[2021-07-01 14:47:36,350]-[train.py line:235]:  === Epoch:[  0/50],step:[ 10/16550],img_size:[544],total_loss:3952.2744|loss_ciou:4.3822|loss_conf:3886.6169|loss_cls:61.2757|lr:0.0000 
[2021-07-01 14:47:39,294]-[train.py line:235]:  === Epoch:[  0/50],step:[ 20/16550],img_size:[608],total_loss:3714.0708|loss_ciou:4.5976|loss_conf:3648.7988|loss_cls:60.6751|lr:0.0000 
[2021-07-01 14:47:42,234]-[train.py line:235]:  === Epoch:[  0/50],step:[ 30/16550],img_size:[608],total_loss:3299.1177|loss_ciou:5.1018|loss_conf:3225.9312|loss_cls:68.0850|lr:0.0000 
[2021-07-01 14:47:45,245]-[train.py line:235]:  === Epoch:[  0/50],step:[ 40/16550],img_size:[352],total_loss:2835.1179|loss_ciou:4.7949|loss_conf:2766.1201|loss_cls:64.2025|lr:0.0000 
[2021-07-01 14:47:48,178]-[train.py line:235]:  === Epoch:[  0/50],step:[ 50/16550],img_size:[352],total_loss:2421.7556|loss_ciou:4.3960|loss_conf:2357.2810|loss_cls:60.0785|lr:0.0000 
[2021-07-01 14:47:51,088]-[train.py line:235]:  === Epoch:[  0/50],step:[ 60/16550],img_size:[608],total_loss:2101.5261|loss_ciou:4.9645|loss_conf:2029.3153|loss_cls:67.2465|lr:0.0000 
[2021-07-01 14:47:54,022]-[train.py line:235]:  === Epoch:[  0/50],step:[ 70/16550],img_size:[320],total_loss:1841.8701|loss_ciou:4.8065|loss_conf:1771.6481|loss_cls:65.4155|lr:0.0000 
[2021-07-01 14:47:56,930]-[train.py line:235]:  === Epoch:[  0/50],step:[ 80/16550],img_size:[416],total_loss:1635.3671|loss_ciou:4.5560|loss_conf:1568.6837|loss_cls:62.1275|lr:0.0000 
[2021-07-01 14:47:59,866]-[train.py line:235]:  === Epoch:[  0/50],step:[ 90/16550],img_size:[448],total_loss:1475.1636|loss_ciou:4.7073|loss_conf:1406.2321|loss_cls:64.2247|lr:0.0000 
[2021-07-01 14:48:02,824]-[train.py line:235]:  === Epoch:[  0/50],step:[100/16550],img_size:[512],total_loss:1350.6752|loss_ciou:5.2863|loss_conf:1274.1697|loss_cls:71.2198|lr:0.0000 
[2021-07-01 14:48:05,768]-[train.py line:235]:  === Epoch:[  0/50],step:[110/16550],img_size:[448],total_loss:1240.4502|loss_ciou:5.2698|loss_conf:1164.1312|loss_cls:71.0498|lr:0.0000 
[2021-07-01 14:48:08,720]-[train.py line:235]:  === Epoch:[  0/50],step:[120/16550],img_size:[512],total_loss:1146.3508|loss_ciou:5.1817|loss_conf:1071.4871|loss_cls:69.6826|lr:0.0000 
[2021-07-01 14:48:11,639]-[train.py line:235]:  === Epoch:[  0/50],step:[130/16550],img_size:[512],total_loss:1065.1031|loss_ciou:5.0183|loss_conf:992.4992|loss_cls:67.5862|lr:0.0000 
[2021-07-01 14:48:14,553]-[train.py line:235]:  === Epoch:[  0/50],step:[140/16550],img_size:[576],total_loss:998.4678|loss_ciou:5.1234|loss_conf:924.7288|loss_cls:68.6161|lr:0.0000 
[2021-07-01 14:48:17,487]-[train.py line:235]:  === Epoch:[  0/50],step:[150/16550],img_size:[384],total_loss:940.1165|loss_ciou:5.1530|loss_conf:865.8064|loss_cls:69.1575|lr:0.0000 
[2021-07-01 14:48:20,434]-[train.py line:235]:  === Epoch:[  0/50],step:[160/16550],img_size:[608],total_loss:888.7751|loss_ciou:5.1850|loss_conf:814.0022|loss_cls:69.5883|lr:0.0000 
[2021-07-01 14:48:23,504]-[train.py line:235]:  === Epoch:[  0/50],step:[170/16550],img_size:[416],total_loss:843.8647|loss_ciou:5.2451|loss_conf:768.1807|loss_cls:70.4393|lr:0.0000 
[2021-07-01 14:48:26,514]-[train.py line:235]:  === Epoch:[  0/50],step:[180/16550],img_size:[544],total_loss:803.3463|loss_ciou:5.2574|loss_conf:727.3119|loss_cls:70.7772|lr:0.0000 
[2021-07-01 14:48:29,500]-[train.py line:235]:  === Epoch:[  0/50],step:[190/16550],img_size:[320],total_loss:766.9061|loss_ciou:5.2708|loss_conf:690.6872|loss_cls:70.9483|lr:0.0000 
[2021-07-01 14:48:32,430]-[train.py line:235]:  === Epoch:[  0/50],step:[200/16550],img_size:[352],total_loss:733.1460|loss_ciou:5.2174|loss_conf:657.5350|loss_cls:70.3937|lr:0.0000 
[2021-07-01 14:48:35,356]-[train.py line:235]:  === Epoch:[  0/50],step:[210/16550],img_size:[480],total_loss:704.3928|loss_ciou:5.2935|loss_conf:627.6951|loss_cls:71.4044|lr:0.0000 
[2021-07-01 14:48:38,334]-[train.py line:235]:  === Epoch:[  0/50],step:[220/16550],img_size:[608],total_loss:676.2390|loss_ciou:5.2353|loss_conf:600.2933|loss_cls:70.7105|lr:0.0000 
[2021-07-01 14:48:41,281]-[train.py line:235]:  === Epoch:[  0/50],step:[230/16550],img_size:[608],total_loss:650.1337|loss_ciou:5.1626|loss_conf:575.1965|loss_cls:69.7746|lr:0.0000 
[2021-07-01 14:48:44,252]-[train.py line:235]:  === Epoch:[  0/50],step:[240/16550],img_size:[576],total_loss:625.8450|loss_ciou:5.0809|loss_conf:552.1487|loss_cls:68.6155|lr:0.0000 
[2021-07-01 14:48:47,391]-[train.py line:235]:  === Epoch:[  0/50],step:[250/16550],img_size:[480],total_loss:605.1326|loss_ciou:5.1139|loss_conf:531.0779|loss_cls:68.9409|lr:0.0000 
[2021-07-01 14:48:50,642]-[train.py line:235]:  === Epoch:[  0/50],step:[260/16550],img_size:[608],total_loss:585.2601|loss_ciou:5.0923|loss_conf:511.5103|loss_cls:68.6575|lr:0.0000 
[2021-07-01 14:48:53,768]-[train.py line:235]:  === Epoch:[  0/50],step:[270/16550],img_size:[448],total_loss:566.3833|loss_ciou:5.0476|loss_conf:493.3287|loss_cls:68.0071|lr:0.0000 
[2021-07-01 14:48:56,761]-[train.py line:235]:  === Epoch:[  0/50],step:[280/16550],img_size:[416],total_loss:549.1640|loss_ciou:5.0230|loss_conf:476.4560|loss_cls:67.6849|lr:0.0000 
[2021-07-01 14:48:59,729]-[train.py line:235]:  === Epoch:[  0/50],step:[290/16550],img_size:[320],total_loss:533.6540|loss_ciou:5.0391|loss_conf:460.7827|loss_cls:67.8321|lr:0.0000 
[2021-07-01 14:49:02,664]-[train.py line:235]:  === Epoch:[  0/50],step:[300/16550],img_size:[544],total_loss:519.3983|loss_ciou:5.0531|loss_conf:446.2184|loss_cls:68.1265|lr:0.0000 
[2021-07-01 14:49:05,624]-[train.py line:235]:  === Epoch:[  0/50],step:[310/16550],img_size:[352],total_loss:505.9225|loss_ciou:5.0726|loss_conf:432.5186|loss_cls:68.3312|lr:0.0000 
[2021-07-01 14:49:08,577]-[train.py line:235]:  === Epoch:[  0/50],step:[320/16550],img_size:[448],total_loss:492.4939|loss_ciou:5.0405|loss_conf:419.5808|loss_cls:67.8726|lr:0.0000 
[2021-07-01 14:49:11,537]-[train.py line:235]:  === Epoch:[  0/50],step:[330/16550],img_size:[576],total_loss:480.8297|loss_ciou:5.0798|loss_conf:407.5550|loss_cls:68.1948|lr:0.0000 
[2021-07-01 14:49:14,473]-[train.py line:235]:  === Epoch:[  0/50],step:[340/16550],img_size:[608],total_loss:469.2988|loss_ciou:5.0729|loss_conf:396.1395|loss_cls:68.0863|lr:0.0000 
[2021-07-01 14:49:17,417]-[train.py line:235]:  === Epoch:[  0/50],step:[350/16550],img_size:[608],total_loss:458.3742|loss_ciou:5.0771|loss_conf:385.3430|loss_cls:67.9541|lr:0.0000 
[2021-07-01 14:49:20,534]-[train.py line:235]:  === Epoch:[  0/50],step:[360/16550],img_size:[384],total_loss:448.7303|loss_ciou:5.1238|loss_conf:375.2332|loss_cls:68.3734|lr:0.0000 
[2021-07-01 14:49:23,841]-[train.py line:235]:  === Epoch:[  0/50],step:[370/16550],img_size:[544],total_loss:438.6052|loss_ciou:5.0969|loss_conf:365.5450|loss_cls:67.9633|lr:0.0000 
[2021-07-01 14:49:26,915]-[train.py line:235]:  === Epoch:[  0/50],step:[380/16550],img_size:[512],total_loss:429.5506|loss_ciou:5.1119|loss_conf:356.4239|loss_cls:68.0147|lr:0.0000 
[2021-07-01 14:49:30,292]-[train.py line:235]:  === Epoch:[  0/50],step:[390/16550],img_size:[448],total_loss:420.0950|loss_ciou:5.0681|loss_conf:347.6536|loss_cls:67.3733|lr:0.0000 
[2021-07-01 14:49:33,500]-[train.py line:235]:  === Epoch:[  0/50],step:[400/16550],img_size:[544],total_loss:412.5007|loss_ciou:5.1132|loss_conf:339.5445|loss_cls:67.8429|lr:0.0000 
[2021-07-01 14:49:36,780]-[train.py line:235]:  === Epoch:[  0/50],step:[410/16550],img_size:[608],total_loss:404.7675|loss_ciou:5.1279|loss_conf:331.7253|loss_cls:67.9143|lr:0.0000 
[2021-07-01 14:49:40,211]-[train.py line:235]:  === Epoch:[  0/50],step:[420/16550],img_size:[576],total_loss:397.1133|loss_ciou:5.1299|loss_conf:324.2325|loss_cls:67.7509|lr:0.0000 
[2021-07-01 14:49:43,452]-[train.py line:235]:  === Epoch:[  0/50],step:[430/16550],img_size:[608],total_loss:390.7846|loss_ciou:5.1898|loss_conf:317.1962|loss_cls:68.3985|lr:0.0000 
[2021-07-01 14:49:46,582]-[train.py line:235]:  === Epoch:[  0/50],step:[440/16550],img_size:[576],total_loss:384.0304|loss_ciou:5.1971|loss_conf:310.3987|loss_cls:68.4344|lr:0.0000 
[2021-07-01 14:49:49,779]-[train.py line:235]:  === Epoch:[  0/50],step:[450/16550],img_size:[384],total_loss:376.8404|loss_ciou:5.1598|loss_conf:303.8023|loss_cls:67.8780|lr:0.0000 
[2021-07-01 14:49:53,001]-[train.py line:235]:  === Epoch:[  0/50],step:[460/16550],img_size:[608],total_loss:370.9884|loss_ciou:5.1911|loss_conf:297.6446|loss_cls:68.1525|lr:0.0000 
[2021-07-01 14:49:56,040]-[train.py line:235]:  === Epoch:[  0/50],step:[470/16550],img_size:[384],total_loss:364.5786|loss_ciou:5.1695|loss_conf:291.6230|loss_cls:67.7859|lr:0.0000 
[2021-07-01 14:49:59,113]-[train.py line:235]:  === Epoch:[  0/50],step:[480/16550],img_size:[448],total_loss:358.2305|loss_ciou:5.1305|loss_conf:285.8206|loss_cls:67.2791|lr:0.0000 
[2021-07-01 14:50:02,326]-[train.py line:235]:  === Epoch:[  0/50],step:[490/16550],img_size:[416],total_loss:352.7782|loss_ciou:5.1440|loss_conf:280.3515|loss_cls:67.2824|lr:0.0000 
[2021-07-01 14:50:05,570]-[train.py line:235]:  === Epoch:[  0/50],step:[500/16550],img_size:[384],total_loss:347.0412|loss_ciou:5.1202|loss_conf:275.0140|loss_cls:66.9068|lr:0.0000 
[2021-07-01 14:50:08,914]-[train.py line:235]:  === Epoch:[  0/50],step:[510/16550],img_size:[512],total_loss:341.6060|loss_ciou:5.0992|loss_conf:269.9081|loss_cls:66.5985|lr:0.0000 
[2021-07-01 14:50:12,301]-[train.py line:235]:  === Epoch:[  0/50],step:[520/16550],img_size:[480],total_loss:336.0221|loss_ciou:5.0576|loss_conf:264.9425|loss_cls:66.0217|lr:0.0000 
[2021-07-01 14:50:15,405]-[train.py line:235]:  === Epoch:[  0/50],step:[530/16550],img_size:[480],total_loss:331.4233|loss_ciou:5.0757|loss_conf:260.2705|loss_cls:66.0768|lr:0.0000 
[2021-07-01 14:50:18,406]-[train.py line:235]:  === Epoch:[  0/50],step:[540/16550],img_size:[448],total_loss:326.5439|loss_ciou:5.0594|loss_conf:255.7176|loss_cls:65.7665|lr:0.0000 
[2021-07-01 14:50:21,361]-[train.py line:235]:  === Epoch:[  0/50],step:[550/16550],img_size:[480],total_loss:321.9685|loss_ciou:5.0595|loss_conf:251.3360|loss_cls:65.5726|lr:0.0000 
[2021-07-01 14:50:24,327]-[train.py line:235]:  === Epoch:[  0/50],step:[560/16550],img_size:[320],total_loss:318.1513|loss_ciou:5.1002|loss_conf:247.1944|loss_cls:65.8564|lr:0.0000 
[2021-07-01 14:50:27,291]-[train.py line:235]:  === Epoch:[  0/50],step:[570/16550],img_size:[416],total_loss:313.4283|loss_ciou:5.0597|loss_conf:243.0443|loss_cls:65.3238|lr:0.0000 
[2021-07-01 14:50:30,350]-[train.py line:235]:  === Epoch:[  0/50],step:[580/16550],img_size:[544],total_loss:309.7338|loss_ciou:5.0860|loss_conf:239.1673|loss_cls:65.4800|lr:0.0000 
[2021-07-01 14:50:33,413]-[train.py line:235]:  === Epoch:[  0/50],step:[590/16550],img_size:[448],total_loss:305.8201|loss_ciou:5.0813|loss_conf:235.3799|loss_cls:65.3583|lr:0.0000 
[2021-07-01 14:50:36,360]-[train.py line:235]:  === Epoch:[  0/50],step:[600/16550],img_size:[320],total_loss:301.8204|loss_ciou:5.0655|loss_conf:231.6829|loss_cls:65.0716|lr:0.0000 
[2021-07-01 14:50:39,322]-[train.py line:235]:  === Epoch:[  0/50],step:[610/16550],img_size:[384],total_loss:297.9456|loss_ciou:5.0474|loss_conf:228.1035|loss_cls:64.7942|lr:0.0000 
[2021-07-01 14:50:42,318]-[train.py line:235]:  === Epoch:[  0/50],step:[620/16550],img_size:[576],total_loss:294.6433|loss_ciou:5.0664|loss_conf:224.7065|loss_cls:64.8700|lr:0.0000 
[2021-07-01 14:50:45,439]-[train.py line:235]:  === Epoch:[  0/50],step:[630/16550],img_size:[480],total_loss:292.1772|loss_ciou:5.1333|loss_conf:221.5248|loss_cls:65.5186|lr:0.0000 
[2021-07-01 14:50:48,408]-[train.py line:235]:  === Epoch:[  0/50],step:[640/16550],img_size:[320],total_loss:288.1736|loss_ciou:5.0887|loss_conf:218.2050|loss_cls:64.8795|lr:0.0000 
[2021-07-01 14:50:51,391]-[train.py line:235]:  === Epoch:[  0/50],step:[650/16550],img_size:[512],total_loss:284.5105|loss_ciou:5.0570|loss_conf:215.0132|loss_cls:64.4398|lr:0.0000 
[2021-07-01 14:50:54,360]-[train.py line:235]:  === Epoch:[  0/50],step:[660/16550],img_size:[320],total_loss:280.7306|loss_ciou:5.0099|loss_conf:211.8881|loss_cls:63.8321|lr:0.0000 
[2021-07-01 14:50:57,321]-[train.py line:235]:  === Epoch:[  0/50],step:[670/16550],img_size:[512],total_loss:277.6494|loss_ciou:5.0088|loss_conf:208.9417|loss_cls:63.6985|lr:0.0000 
[2021-07-01 14:51:00,290]-[train.py line:235]:  === Epoch:[  0/50],step:[680/16550],img_size:[576],total_loss:274.1770|loss_ciou:4.9704|loss_conf:206.0041|loss_cls:63.2019|lr:0.0000 
[2021-07-01 14:51:03,288]-[train.py line:235]:  === Epoch:[  0/50],step:[690/16550],img_size:[352],total_loss:271.3008|loss_ciou:4.9659|loss_conf:203.2295|loss_cls:63.1049|lr:0.0000 
[2021-07-01 14:51:06,266]-[train.py line:235]:  === Epoch:[  0/50],step:[700/16550],img_size:[384],total_loss:268.2844|loss_ciou:4.9517|loss_conf:200.5077|loss_cls:62.8245|lr:0.0000 
[2021-07-01 14:51:09,241]-[train.py line:235]:  === Epoch:[  0/50],step:[710/16550],img_size:[448],total_loss:265.6226|loss_ciou:4.9582|loss_conf:197.8969|loss_cls:62.7671|lr:0.0000 
[2021-07-01 14:51:12,231]-[train.py line:235]:  === Epoch:[  0/50],step:[720/16550],img_size:[512],total_loss:263.0856|loss_ciou:4.9648|loss_conf:195.3735|loss_cls:62.7469|lr:0.0000 
[2021-07-01 14:51:15,227]-[train.py line:235]:  === Epoch:[  0/50],step:[730/16550],img_size:[448],total_loss:260.6337|loss_ciou:4.9796|loss_conf:192.9221|loss_cls:62.7315|lr:0.0000 
[2021-07-01 14:51:18,204]-[train.py line:235]:  === Epoch:[  0/50],step:[740/16550],img_size:[384],total_loss:257.9501|loss_ciou:4.9694|loss_conf:190.4841|loss_cls:62.4962|lr:0.0000 
[2021-07-01 14:51:21,199]-[train.py line:235]:  === Epoch:[  0/50],step:[750/16550],img_size:[576],total_loss:255.5240|loss_ciou:4.9734|loss_conf:188.1443|loss_cls:62.4059|lr:0.0000 
[2021-07-01 14:51:24,171]-[train.py line:235]:  === Epoch:[  0/50],step:[760/16550],img_size:[352],total_loss:253.7586|loss_ciou:5.0194|loss_conf:185.9638|loss_cls:62.7751|lr:0.0000 
[2021-07-01 14:51:27,163]-[train.py line:235]:  === Epoch:[  0/50],step:[770/16550],img_size:[512],total_loss:251.4941|loss_ciou:5.0240|loss_conf:183.7550|loss_cls:62.7147|lr:0.0000 
[2021-07-01 14:51:30,159]-[train.py line:235]:  === Epoch:[  0/50],step:[780/16550],img_size:[320],total_loss:249.0441|loss_ciou:5.0129|loss_conf:181.5591|loss_cls:62.4716|lr:0.0000 
[2021-07-01 14:51:33,154]-[train.py line:235]:  === Epoch:[  0/50],step:[790/16550],img_size:[576],total_loss:247.1353|loss_ciou:5.0395|loss_conf:179.4921|loss_cls:62.6033|lr:0.0000 
[2021-07-01 14:51:36,121]-[train.py line:235]:  === Epoch:[  0/50],step:[800/16550],img_size:[352],total_loss:245.1628|loss_ciou:5.0548|loss_conf:177.4683|loss_cls:62.6393|lr:0.0000 
[2021-07-01 14:51:39,117]-[train.py line:235]:  === Epoch:[  0/50],step:[810/16550],img_size:[544],total_loss:242.7678|loss_ciou:5.0378|loss_conf:175.4139|loss_cls:62.3158|lr:0.0000 
[2021-07-01 14:51:42,088]-[train.py line:235]:  === Epoch:[  0/50],step:[820/16550],img_size:[576],total_loss:240.5538|loss_ciou:5.0319|loss_conf:173.4312|loss_cls:62.0905|lr:0.0000 
[2021-07-01 14:51:45,094]-[train.py line:235]:  === Epoch:[  0/50],step:[830/16550],img_size:[384],total_loss:238.1993|loss_ciou:5.0126|loss_conf:171.4635|loss_cls:61.7229|lr:0.0000 
[2021-07-01 14:51:48,055]-[train.py line:235]:  === Epoch:[  0/50],step:[840/16550],img_size:[448],total_loss:235.7507|loss_ciou:4.9811|loss_conf:169.5198|loss_cls:61.2495|lr:0.0000 
[2021-07-01 14:51:51,060]-[train.py line:235]:  === Epoch:[  0/50],step:[850/16550],img_size:[544],total_loss:233.8204|loss_ciou:4.9784|loss_conf:167.7026|loss_cls:61.1391|lr:0.0000 
[2021-07-01 14:51:54,039]-[train.py line:235]:  === Epoch:[  0/50],step:[860/16550],img_size:[416],total_loss:232.3269|loss_ciou:5.0102|loss_conf:165.9874|loss_cls:61.3290|lr:0.0000 
[2021-07-01 14:51:57,038]-[train.py line:235]:  === Epoch:[  0/50],step:[870/16550],img_size:[608],total_loss:230.3887|loss_ciou:5.0053|loss_conf:164.2366|loss_cls:61.1463|lr:0.0000 
[2021-07-01 14:52:00,018]-[train.py line:235]:  === Epoch:[  0/50],step:[880/16550],img_size:[448],total_loss:229.1193|loss_ciou:5.0438|loss_conf:162.6310|loss_cls:61.4442|lr:0.0000 
[2021-07-01 14:52:03,036]-[train.py line:235]:  === Epoch:[  0/50],step:[890/16550],img_size:[352],total_loss:227.6581|loss_ciou:5.0754|loss_conf:161.0197|loss_cls:61.5627|lr:0.0000 
[2021-07-01 14:52:06,104]-[train.py line:235]:  === Epoch:[  0/50],step:[900/16550],img_size:[544],total_loss:225.9800|loss_ciou:5.0798|loss_conf:159.4092|loss_cls:61.4907|lr:0.0000 
[2021-07-01 14:52:09,082]-[train.py line:235]:  === Epoch:[  0/50],step:[910/16550],img_size:[384],total_loss:223.9415|loss_ciou:5.0561|loss_conf:157.7627|loss_cls:61.1224|lr:0.0000 
[2021-07-01 14:52:12,029]-[train.py line:235]:  === Epoch:[  0/50],step:[920/16550],img_size:[416],total_loss:222.3338|loss_ciou:5.0612|loss_conf:156.2247|loss_cls:61.0476|lr:0.0000 
[2021-07-01 14:52:15,018]-[train.py line:235]:  === Epoch:[  0/50],step:[930/16550],img_size:[576],total_loss:220.4395|loss_ciou:5.0453|loss_conf:154.6550|loss_cls:60.7390|lr:0.0000 
[2021-07-01 14:52:18,025]-[train.py line:235]:  === Epoch:[  0/50],step:[940/16550],img_size:[512],total_loss:218.6607|loss_ciou:5.0374|loss_conf:153.1406|loss_cls:60.4824|lr:0.0000 
[2021-07-01 14:52:21,036]-[train.py line:235]:  === Epoch:[  0/50],step:[950/16550],img_size:[608],total_loss:216.6321|loss_ciou:5.0059|loss_conf:151.6058|loss_cls:60.0202|lr:0.0000 
[2021-07-01 14:52:24,001]-[train.py line:235]:  === Epoch:[  0/50],step:[960/16550],img_size:[480],total_loss:214.8575|loss_ciou:4.9917|loss_conf:150.1416|loss_cls:59.7239|lr:0.0000 
[2021-07-01 14:52:26,972]-[train.py line:235]:  === Epoch:[  0/50],step:[970/16550],img_size:[608],total_loss:213.4724|loss_ciou:5.0030|loss_conf:148.7795|loss_cls:59.6898|lr:0.0000 
[2021-07-01 14:52:29,933]-[train.py line:235]:  === Epoch:[  0/50],step:[980/16550],img_size:[320],total_loss:211.8585|loss_ciou:4.9985|loss_conf:147.3854|loss_cls:59.4745|lr:0.0000 
[2021-07-01 14:52:32,954]-[train.py line:235]:  === Epoch:[  0/50],step:[990/16550],img_size:[416],total_loss:210.3382|loss_ciou:4.9972|loss_conf:146.0348|loss_cls:59.3061|lr:0.0000 
[2021-07-01 14:52:35,960]-[train.py line:235]:  === Epoch:[  0/50],step:[1000/16550],img_size:[608],total_loss:208.9924|loss_ciou:5.0085|loss_conf:144.7412|loss_cls:59.2426|lr:0.0000 
[2021-07-01 14:52:38,964]-[train.py line:235]:  === Epoch:[  0/50],step:[1010/16550],img_size:[576],total_loss:207.5747|loss_ciou:5.0118|loss_conf:143.4506|loss_cls:59.1123|lr:0.0000 
[2021-07-01 14:52:41,958]-[train.py line:235]:  === Epoch:[  0/50],step:[1020/16550],img_size:[544],total_loss:205.9560|loss_ciou:4.9957|loss_conf:142.1457|loss_cls:58.8145|lr:0.0000 
[2021-07-01 14:52:44,941]-[train.py line:235]:  === Epoch:[  0/50],step:[1030/16550],img_size:[544],total_loss:204.3409|loss_ciou:4.9790|loss_conf:140.8643|loss_cls:58.4976|lr:0.0000 
[2021-07-01 14:52:47,931]-[train.py line:235]:  === Epoch:[  0/50],step:[1040/16550],img_size:[384],total_loss:203.3573|loss_ciou:5.0161|loss_conf:139.7296|loss_cls:58.6116|lr:0.0000 
[2021-07-01 14:52:50,907]-[train.py line:235]:  === Epoch:[  0/50],step:[1050/16550],img_size:[384],total_loss:201.7135|loss_ciou:4.9936|loss_conf:138.4778|loss_cls:58.2421|lr:0.0000 
[2021-07-01 14:52:53,912]-[train.py line:235]:  === Epoch:[  0/50],step:[1060/16550],img_size:[352],total_loss:200.2136|loss_ciou:4.9796|loss_conf:137.2689|loss_cls:57.9651|lr:0.0000 
[2021-07-01 14:52:56,914]-[train.py line:235]:  === Epoch:[  0/50],step:[1070/16550],img_size:[576],total_loss:199.2859|loss_ciou:5.0153|loss_conf:136.1854|loss_cls:58.0852|lr:0.0000 
[2021-07-01 14:52:59,905]-[train.py line:235]:  === Epoch:[  0/50],step:[1080/16550],img_size:[576],total_loss:197.8096|loss_ciou:5.0061|loss_conf:135.0244|loss_cls:57.7790|lr:0.0000 
[2021-07-01 14:53:02,925]-[train.py line:235]:  === Epoch:[  0/50],step:[1090/16550],img_size:[352],total_loss:196.9489|loss_ciou:5.0402|loss_conf:133.9911|loss_cls:57.9177|lr:0.0000 
[2021-07-01 14:53:05,915]-[train.py line:235]:  === Epoch:[  0/50],step:[1100/16550],img_size:[320],total_loss:195.5102|loss_ciou:5.0248|loss_conf:132.8664|loss_cls:57.6191|lr:0.0000 
[2021-07-01 14:53:08,903]-[train.py line:235]:  === Epoch:[  0/50],step:[1110/16550],img_size:[448],total_loss:194.0871|loss_ciou:5.0111|loss_conf:131.7547|loss_cls:57.3213|lr:0.0000 
[2021-07-01 14:53:11,907]-[train.py line:235]:  === Epoch:[  0/50],step:[1120/16550],img_size:[608],total_loss:192.7603|loss_ciou:5.0005|loss_conf:130.6814|loss_cls:57.0784|lr:0.0000 
[2021-07-01 14:53:14,900]-[train.py line:235]:  === Epoch:[  0/50],step:[1130/16550],img_size:[352],total_loss:191.4712|loss_ciou:4.9921|loss_conf:129.6296|loss_cls:56.8495|lr:0.0000 
[2021-07-01 14:53:17,906]-[train.py line:235]:  === Epoch:[  0/50],step:[1140/16550],img_size:[448],total_loss:189.9393|loss_ciou:4.9623|loss_conf:128.5425|loss_cls:56.4345|lr:0.0000 
[2021-07-01 14:53:20,917]-[train.py line:235]:  === Epoch:[  0/50],step:[1150/16550],img_size:[544],total_loss:188.4875|loss_ciou:4.9372|loss_conf:127.4849|loss_cls:56.0654|lr:0.0000 
[2021-07-01 14:53:23,911]-[train.py line:235]:  === Epoch:[  0/50],step:[1160/16550],img_size:[576],total_loss:187.4581|loss_ciou:4.9497|loss_conf:126.5286|loss_cls:55.9799|lr:0.0000 
[2021-07-01 14:53:26,903]-[train.py line:235]:  === Epoch:[  0/50],step:[1170/16550],img_size:[512],total_loss:186.2563|loss_ciou:4.9429|loss_conf:125.5430|loss_cls:55.7706|lr:0.0000 
[2021-07-01 14:53:29,905]-[train.py line:235]:  === Epoch:[  0/50],step:[1180/16550],img_size:[320],total_loss:185.1658|loss_ciou:4.9580|loss_conf:124.6020|loss_cls:55.6059|lr:0.0000 
[2021-07-01 14:53:32,900]-[train.py line:235]:  === Epoch:[  0/50],step:[1190/16550],img_size:[384],total_loss:184.1090|loss_ciou:4.9598|loss_conf:123.6751|loss_cls:55.4741|lr:0.0000 
[2021-07-01 14:53:35,910]-[train.py line:235]:  === Epoch:[  0/50],step:[1200/16550],img_size:[512],total_loss:182.9054|loss_ciou:4.9530|loss_conf:122.7277|loss_cls:55.2247|lr:0.0000 
[2021-07-01 14:53:38,890]-[train.py line:235]:  === Epoch:[  0/50],step:[1210/16550],img_size:[480],total_loss:181.5937|loss_ciou:4.9306|loss_conf:121.7740|loss_cls:54.8891|lr:0.0000 
[2021-07-01 14:53:41,876]-[train.py line:235]:  === Epoch:[  0/50],step:[1220/16550],img_size:[480],total_loss:180.4139|loss_ciou:4.9194|loss_conf:120.8580|loss_cls:54.6366|lr:0.0000 
[2021-07-01 14:53:44,873]-[train.py line:235]:  === Epoch:[  0/50],step:[1230/16550],img_size:[384],total_loss:179.3735|loss_ciou:4.9231|loss_conf:119.9812|loss_cls:54.4691|lr:0.0000 
[2021-07-01 14:53:47,853]-[train.py line:235]:  === Epoch:[  0/50],step:[1240/16550],img_size:[416],total_loss:178.2799|loss_ciou:4.9164|loss_conf:119.1015|loss_cls:54.2619|lr:0.0000 
[2021-07-01 14:53:50,841]-[train.py line:235]:  === Epoch:[  0/50],step:[1250/16550],img_size:[576],total_loss:177.0275|loss_ciou:4.8960|loss_conf:118.2052|loss_cls:53.9262|lr:0.0000 
[2021-07-01 14:53:53,837]-[train.py line:235]:  === Epoch:[  0/50],step:[1260/16550],img_size:[384],total_loss:176.2905|loss_ciou:4.9158|loss_conf:117.4127|loss_cls:53.9619|lr:0.0000 
[2021-07-01 14:53:56,851]-[train.py line:235]:  === Epoch:[  0/50],step:[1270/16550],img_size:[352],total_loss:175.3411|loss_ciou:4.9189|loss_conf:116.6021|loss_cls:53.8200|lr:0.0000 
[2021-07-01 14:53:59,868]-[train.py line:235]:  === Epoch:[  0/50],step:[1280/16550],img_size:[544],total_loss:174.5587|loss_ciou:4.9395|loss_conf:115.8277|loss_cls:53.7915|lr:0.0000 
[2021-07-01 14:54:02,870]-[train.py line:235]:  === Epoch:[  0/50],step:[1290/16550],img_size:[512],total_loss:173.4465|loss_ciou:4.9278|loss_conf:114.9943|loss_cls:53.5243|lr:0.0000 
[2021-07-01 14:54:05,855]-[train.py line:235]:  === Epoch:[  0/50],step:[1300/16550],img_size:[384],total_loss:172.4360|loss_ciou:4.9256|loss_conf:114.1976|loss_cls:53.3128|lr:0.0000 
[2021-07-01 14:54:08,844]-[train.py line:235]:  === Epoch:[  0/50],step:[1310/16550],img_size:[608],total_loss:171.4686|loss_ciou:4.9207|loss_conf:113.4179|loss_cls:53.1299|lr:0.0000 
[2021-07-01 14:54:11,843]-[train.py line:235]:  === Epoch:[  0/50],step:[1320/16550],img_size:[512],total_loss:170.5121|loss_ciou:4.9189|loss_conf:112.6515|loss_cls:52.9417|lr:0.0000 
[2021-07-01 14:54:14,833]-[train.py line:235]:  === Epoch:[  0/50],step:[1330/16550],img_size:[384],total_loss:169.3831|loss_ciou:4.8978|loss_conf:111.8547|loss_cls:52.6305|lr:0.0000 
[2021-07-01 14:54:17,836]-[train.py line:235]:  === Epoch:[  0/50],step:[1340/16550],img_size:[544],total_loss:168.4958|loss_ciou:4.8929|loss_conf:111.1113|loss_cls:52.4916|lr:0.0000 
[2021-07-01 14:54:20,813]-[train.py line:235]:  === Epoch:[  0/50],step:[1350/16550],img_size:[576],total_loss:167.5431|loss_ciou:4.8872|loss_conf:110.3674|loss_cls:52.2885|lr:0.0000 
[2021-07-01 14:54:23,778]-[train.py line:235]:  === Epoch:[  0/50],step:[1360/16550],img_size:[480],total_loss:166.5059|loss_ciou:4.8723|loss_conf:109.6115|loss_cls:52.0220|lr:0.0000 
[2021-07-01 14:54:26,781]-[train.py line:235]:  === Epoch:[  0/50],step:[1370/16550],img_size:[384],total_loss:165.5158|loss_ciou:4.8578|loss_conf:108.8743|loss_cls:51.7837|lr:0.0000 
[2021-07-01 14:54:29,812]-[train.py line:235]:  === Epoch:[  0/50],step:[1380/16550],img_size:[480],total_loss:164.6123|loss_ciou:4.8520|loss_conf:108.1642|loss_cls:51.5961|lr:0.0000 
[2021-07-01 14:54:32,828]-[train.py line:235]:  === Epoch:[  0/50],step:[1390/16550],img_size:[608],total_loss:163.9168|loss_ciou:4.8633|loss_conf:107.5079|loss_cls:51.5456|lr:0.0000 
[2021-07-01 14:54:35,835]-[train.py line:235]:  === Epoch:[  0/50],step:[1400/16550],img_size:[384],total_loss:162.9449|loss_ciou:4.8498|loss_conf:106.7991|loss_cls:51.2959|lr:0.0000 
[2021-07-01 14:54:38,838]-[train.py line:235]:  === Epoch:[  0/50],step:[1410/16550],img_size:[352],total_loss:162.3014|loss_ciou:4.8670|loss_conf:106.1650|loss_cls:51.2695|lr:0.0000 
[2021-07-01 14:54:41,980]-[train.py line:235]:  === Epoch:[  0/50],step:[1420/16550],img_size:[480],total_loss:161.5752|loss_ciou:4.8720|loss_conf:105.5160|loss_cls:51.1873|lr:0.0000 
[2021-07-01 14:54:44,981]-[train.py line:235]:  === Epoch:[  0/50],step:[1430/16550],img_size:[448],total_loss:160.5998|loss_ciou:4.8547|loss_conf:104.8261|loss_cls:50.9190|lr:0.0000 
[2021-07-01 14:54:47,989]-[train.py line:235]:  === Epoch:[  0/50],step:[1440/16550],img_size:[416],total_loss:159.8088|loss_ciou:4.8525|loss_conf:104.1829|loss_cls:50.7735|lr:0.0000 
[2021-07-01 14:54:51,002]-[train.py line:235]:  === Epoch:[  0/50],step:[1450/16550],img_size:[512],total_loss:159.1009|loss_ciou:4.8591|loss_conf:103.5618|loss_cls:50.6801|lr:0.0000 
[2021-07-01 14:54:54,007]-[train.py line:235]:  === Epoch:[  0/50],step:[1460/16550],img_size:[448],total_loss:158.3372|loss_ciou:4.8570|loss_conf:102.9444|loss_cls:50.5358|lr:0.0000 
[2021-07-01 14:54:57,186]-[train.py line:235]:  === Epoch:[  0/50],step:[1470/16550],img_size:[480],total_loss:157.6701|loss_ciou:4.8612|loss_conf:102.3448|loss_cls:50.4640|lr:0.0000 
[2021-07-01 14:55:00,202]-[train.py line:235]:  === Epoch:[  0/50],step:[1480/16550],img_size:[544],total_loss:156.8384|loss_ciou:4.8521|loss_conf:101.7159|loss_cls:50.2705|lr:0.0000 
[2021-07-01 14:55:03,188]-[train.py line:235]:  === Epoch:[  0/50],step:[1490/16550],img_size:[512],total_loss:156.1212|loss_ciou:4.8570|loss_conf:101.1236|loss_cls:50.1407|lr:0.0000 
[2021-07-01 14:55:06,173]-[train.py line:235]:  === Epoch:[  0/50],step:[1500/16550],img_size:[576],total_loss:155.3152|loss_ciou:4.8530|loss_conf:100.5145|loss_cls:49.9478|lr:0.0000 
[2021-07-01 14:55:09,196]-[train.py line:235]:  === Epoch:[  0/50],step:[1510/16550],img_size:[544],total_loss:154.6405|loss_ciou:4.8551|loss_conf:99.9381|loss_cls:49.8474|lr:0.0000 
[2021-07-01 14:55:12,318]-[train.py line:235]:  === Epoch:[  0/50],step:[1520/16550],img_size:[384],total_loss:153.8226|loss_ciou:4.8446|loss_conf:99.3379|loss_cls:49.6403|lr:0.0000 
[2021-07-01 14:55:15,399]-[train.py line:235]:  === Epoch:[  0/50],step:[1530/16550],img_size:[480],total_loss:153.1215|loss_ciou:4.8483|loss_conf:98.7706|loss_cls:49.5028|lr:0.0000 
[2021-07-01 15:19:52,290]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-01 15:19:52,291]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): CSPDarknet53(
      (stem_conv): Convolutional(
        (_Convolutional__conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (_Convolutional__activate): Mish()
      )
      (stages): ModuleList(
        (0): CSPFirstStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (1): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (2): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (3): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (4): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): Convolutional(
              (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-01 15:19:52,306]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-01 15:19:52,307]-[train.py line:162]:        =======  start  training   ======      
[2021-07-01 15:19:52,309]-[train.py line:168]:===Epoch:[0/50]=== 
[2021-07-01 15:20:22,658]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-01 15:20:22,659]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): CSPDarknet53(
      (stem_conv): Convolutional(
        (_Convolutional__conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (_Convolutional__activate): Mish()
      )
      (stages): ModuleList(
        (0): CSPFirstStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (1): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (2): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (3): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (4): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): Convolutional(
              (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-01 15:20:22,669]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-01 15:20:22,669]-[train.py line:162]:        =======  start  training   ======      
[2021-07-01 15:20:22,670]-[train.py line:168]:===Epoch:[0/50]=== 
[2021-07-01 15:20:33,026]-[train.py line:235]:  === Epoch:[  0/50],step:[  0/16550],img_size:[608],total_loss:3953.7368|loss_ciou:1.0013|loss_conf:3931.9363|loss_cls:20.7994|lr:0.0000 
[2021-07-01 15:20:35,974]-[train.py line:235]:  === Epoch:[  0/50],step:[ 10/16550],img_size:[608],total_loss:3942.8945|loss_ciou:3.7456|loss_conf:3886.3916|loss_cls:52.7574|lr:0.0000 
[2021-07-01 15:20:38,901]-[train.py line:235]:  === Epoch:[  0/50],step:[ 20/16550],img_size:[352],total_loss:3703.2012|loss_ciou:3.9046|loss_conf:3645.7898|loss_cls:53.5061|lr:0.0000 
[2021-07-01 15:20:41,879]-[train.py line:235]:  === Epoch:[  0/50],step:[ 30/16550],img_size:[480],total_loss:3315.4224|loss_ciou:6.2377|loss_conf:3225.7795|loss_cls:83.4042|lr:0.0000 
[2021-07-01 15:20:44,933]-[train.py line:235]:  === Epoch:[  0/50],step:[ 40/16550],img_size:[512],total_loss:2858.3633|loss_ciou:6.7594|loss_conf:2762.1958|loss_cls:89.4078|lr:0.0000 
[2021-07-01 15:20:47,928]-[train.py line:235]:  === Epoch:[  0/50],step:[ 50/16550],img_size:[608],total_loss:2441.2310|loss_ciou:6.1395|loss_conf:2353.5581|loss_cls:81.5329|lr:0.0000 
[2021-07-01 15:20:50,972]-[train.py line:235]:  === Epoch:[  0/50],step:[ 60/16550],img_size:[416],total_loss:2122.0217|loss_ciou:6.7706|loss_conf:2025.9120|loss_cls:89.3377|lr:0.0000 
[2021-07-01 15:20:53,907]-[train.py line:235]:  === Epoch:[  0/50],step:[ 70/16550],img_size:[608],total_loss:1859.8396|loss_ciou:6.3851|loss_conf:1768.9604|loss_cls:84.4927|lr:0.0000 
[2021-07-01 15:20:56,851]-[train.py line:235]:  === Epoch:[  0/50],step:[ 80/16550],img_size:[608],total_loss:1651.3507|loss_ciou:5.9299|loss_conf:1566.1758|loss_cls:79.2441|lr:0.0000 
[2021-07-01 15:20:59,786]-[train.py line:235]:  === Epoch:[  0/50],step:[ 90/16550],img_size:[480],total_loss:1487.8624|loss_ciou:5.8351|loss_conf:1403.7634|loss_cls:78.2631|lr:0.0000 
[2021-07-01 15:21:02,736]-[train.py line:235]:  === Epoch:[  0/50],step:[100/16550],img_size:[416],total_loss:1356.7235|loss_ciou:5.9189|loss_conf:1271.5371|loss_cls:79.2669|lr:0.0000 
[2021-07-01 15:21:05,782]-[train.py line:235]:  === Epoch:[  0/50],step:[110/16550],img_size:[384],total_loss:1245.0192|loss_ciou:5.7894|loss_conf:1161.6729|loss_cls:77.5564|lr:0.0000 
[2021-07-01 15:21:08,949]-[train.py line:235]:  === Epoch:[  0/50],step:[120/16550],img_size:[352],total_loss:1152.1719|loss_ciou:5.7751|loss_conf:1069.4932|loss_cls:76.9034|lr:0.0000 
[2021-07-01 15:21:11,930]-[train.py line:235]:  === Epoch:[  0/50],step:[130/16550],img_size:[480],total_loss:1070.4388|loss_ciou:5.5494|loss_conf:990.6578|loss_cls:74.2315|lr:0.0000 
[2021-07-01 15:21:14,862]-[train.py line:235]:  === Epoch:[  0/50],step:[140/16550],img_size:[384],total_loss:1004.3106|loss_ciou:5.6708|loss_conf:923.1121|loss_cls:75.5276|lr:0.0000 
[2021-07-01 15:21:17,809]-[train.py line:235]:  === Epoch:[  0/50],step:[150/16550],img_size:[416],total_loss:944.8899|loss_ciou:5.6229|loss_conf:864.1846|loss_cls:75.0822|lr:0.0000 
[2021-07-01 15:21:20,751]-[train.py line:235]:  === Epoch:[  0/50],step:[160/16550],img_size:[544],total_loss:891.6270|loss_ciou:5.5216|loss_conf:812.3231|loss_cls:73.7821|lr:0.0000 
[2021-07-01 15:21:23,704]-[train.py line:235]:  === Epoch:[  0/50],step:[170/16550],img_size:[448],total_loss:845.2513|loss_ciou:5.4587|loss_conf:766.4621|loss_cls:73.3303|lr:0.0000 
[2021-07-01 15:21:26,632]-[train.py line:235]:  === Epoch:[  0/50],step:[180/16550],img_size:[608],total_loss:803.8583|loss_ciou:5.4119|loss_conf:725.6162|loss_cls:72.8299|lr:0.0000 
[2021-07-01 15:21:29,582]-[train.py line:235]:  === Epoch:[  0/50],step:[190/16550],img_size:[576],total_loss:766.3127|loss_ciou:5.3419|loss_conf:688.9299|loss_cls:72.0407|lr:0.0000 
[2021-07-01 15:21:32,552]-[train.py line:235]:  === Epoch:[  0/50],step:[200/16550],img_size:[352],total_loss:731.6480|loss_ciou:5.2369|loss_conf:655.7710|loss_cls:70.6400|lr:0.0000 
[2021-07-01 15:21:35,504]-[train.py line:235]:  === Epoch:[  0/50],step:[210/16550],img_size:[320],total_loss:702.6708|loss_ciou:5.2908|loss_conf:625.9747|loss_cls:71.4050|lr:0.0000 
[2021-07-01 15:21:38,434]-[train.py line:235]:  === Epoch:[  0/50],step:[220/16550],img_size:[576],total_loss:674.1958|loss_ciou:5.2221|loss_conf:598.5976|loss_cls:70.3758|lr:0.0000 
[2021-07-01 15:21:41,387]-[train.py line:235]:  === Epoch:[  0/50],step:[230/16550],img_size:[480],total_loss:648.2932|loss_ciou:5.1525|loss_conf:573.5824|loss_cls:69.5582|lr:0.0000 
[2021-07-01 15:21:44,351]-[train.py line:235]:  === Epoch:[  0/50],step:[240/16550],img_size:[544],total_loss:623.9304|loss_ciou:5.0531|loss_conf:550.5698|loss_cls:68.3075|lr:0.0000 
[2021-07-01 15:21:47,324]-[train.py line:235]:  === Epoch:[  0/50],step:[250/16550],img_size:[544],total_loss:604.2529|loss_ciou:5.1494|loss_conf:529.6953|loss_cls:69.4082|lr:0.0000 
[2021-07-01 15:21:50,281]-[train.py line:235]:  === Epoch:[  0/50],step:[260/16550],img_size:[576],total_loss:585.3872|loss_ciou:5.2033|loss_conf:510.2896|loss_cls:69.8942|lr:0.0000 
[2021-07-01 15:21:53,259]-[train.py line:235]:  === Epoch:[  0/50],step:[270/16550],img_size:[480],total_loss:567.2776|loss_ciou:5.1981|loss_conf:492.2407|loss_cls:69.8388|lr:0.0000 
[2021-07-01 15:21:56,212]-[train.py line:235]:  === Epoch:[  0/50],step:[280/16550],img_size:[320],total_loss:550.1898|loss_ciou:5.1747|loss_conf:475.4167|loss_cls:69.5986|lr:0.0000 
[2021-07-01 15:21:59,183]-[train.py line:235]:  === Epoch:[  0/50],step:[290/16550],img_size:[544],total_loss:534.8692|loss_ciou:5.2047|loss_conf:459.8091|loss_cls:69.8557|lr:0.0000 
[2021-07-01 15:22:02,144]-[train.py line:235]:  === Epoch:[  0/50],step:[300/16550],img_size:[608],total_loss:519.7969|loss_ciou:5.1747|loss_conf:445.1417|loss_cls:69.4806|lr:0.0000 
[2021-07-01 15:22:05,105]-[train.py line:235]:  === Epoch:[  0/50],step:[310/16550],img_size:[512],total_loss:506.8691|loss_ciou:5.2237|loss_conf:431.5615|loss_cls:70.0839|lr:0.0000 
[2021-07-01 15:22:08,057]-[train.py line:235]:  === Epoch:[  0/50],step:[320/16550],img_size:[576],total_loss:493.8008|loss_ciou:5.2050|loss_conf:418.7327|loss_cls:69.8631|lr:0.0000 
[2021-07-01 15:22:11,002]-[train.py line:235]:  === Epoch:[  0/50],step:[330/16550],img_size:[576],total_loss:481.1493|loss_ciou:5.1726|loss_conf:406.6423|loss_cls:69.3344|lr:0.0000 
[2021-07-01 15:22:13,955]-[train.py line:235]:  === Epoch:[  0/50],step:[340/16550],img_size:[512],total_loss:468.9529|loss_ciou:5.1299|loss_conf:395.1761|loss_cls:68.6468|lr:0.0000 
[2021-07-01 15:22:16,918]-[train.py line:235]:  === Epoch:[  0/50],step:[350/16550],img_size:[480],total_loss:457.3840|loss_ciou:5.0811|loss_conf:384.3419|loss_cls:67.9612|lr:0.0000 
[2021-07-01 15:22:19,879]-[train.py line:235]:  === Epoch:[  0/50],step:[360/16550],img_size:[512],total_loss:447.3293|loss_ciou:5.0955|loss_conf:374.2169|loss_cls:68.0170|lr:0.0000 
[2021-07-01 15:22:22,835]-[train.py line:235]:  === Epoch:[  0/50],step:[370/16550],img_size:[448],total_loss:436.8286|loss_ciou:5.0358|loss_conf:364.4977|loss_cls:67.2952|lr:0.0000 
[2021-07-01 15:22:25,796]-[train.py line:235]:  === Epoch:[  0/50],step:[380/16550],img_size:[576],total_loss:430.1477|loss_ciou:5.2161|loss_conf:355.7037|loss_cls:69.2280|lr:0.0000 
[2021-07-01 15:22:28,762]-[train.py line:235]:  === Epoch:[  0/50],step:[390/16550],img_size:[384],total_loss:420.7301|loss_ciou:5.1667|loss_conf:346.9569|loss_cls:68.6066|lr:0.0000 
[2021-07-01 15:22:31,710]-[train.py line:235]:  === Epoch:[  0/50],step:[400/16550],img_size:[448],total_loss:411.9938|loss_ciou:5.1309|loss_conf:338.6918|loss_cls:68.1713|lr:0.0000 
[2021-07-01 15:22:34,699]-[train.py line:235]:  === Epoch:[  0/50],step:[410/16550],img_size:[608],total_loss:403.8434|loss_ciou:5.1171|loss_conf:330.8234|loss_cls:67.9031|lr:0.0000 
[2021-07-01 15:22:37,678]-[train.py line:235]:  === Epoch:[  0/50],step:[420/16550],img_size:[480],total_loss:396.3744|loss_ciou:5.1215|loss_conf:323.3731|loss_cls:67.8799|lr:0.0000 
[2021-07-01 15:22:40,694]-[train.py line:235]:  === Epoch:[  0/50],step:[430/16550],img_size:[384],total_loss:389.2882|loss_ciou:5.1371|loss_conf:316.2571|loss_cls:67.8942|lr:0.0000 
[2021-07-05 11:22:40,486]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-05 11:22:40,486]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): SwinTransformer(
      (stage1): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=4, dilation=1, padding=0, stride=4)
          (linear): Linear(in_features=48, out_features=128, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=128, out_features=384, bias=False)
                    (to_out): Linear(in_features=128, out_features=128, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=128, out_features=512, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=512, out_features=128, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=128, out_features=384, bias=False)
                    (to_out): Linear(in_features=128, out_features=128, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=128, out_features=512, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=512, out_features=128, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage2): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=512, out_features=256, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=256, out_features=768, bias=False)
                    (to_out): Linear(in_features=256, out_features=256, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=256, out_features=1024, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=1024, out_features=256, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=256, out_features=768, bias=False)
                    (to_out): Linear(in_features=256, out_features=256, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=256, out_features=1024, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=1024, out_features=256, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage3): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=1024, out_features=512, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (1): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (2): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (3): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (4): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (5): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (6): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (7): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (8): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage4): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=2048, out_features=1024, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=1024, out_features=3072, bias=False)
                    (to_out): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=1024, out_features=4096, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=4096, out_features=1024, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=1024, out_features=3072, bias=False)
                    (to_out): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=1024, out_features=4096, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=4096, out_features=1024, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (mlp_head): Sequential(
        (0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=1024, out_features=1000, bias=True)
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-05 11:22:40,496]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-05 11:22:40,496]-[train.py line:162]:        =======  start  training   ======      
[2021-07-05 11:22:40,498]-[train.py line:168]:===Epoch:[0/120]=== 
[2021-07-05 11:25:47,052]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-05 11:25:47,052]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): SwinTransformer(
      (stage1): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=4, dilation=1, padding=0, stride=4)
          (linear): Linear(in_features=48, out_features=128, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=128, out_features=384, bias=False)
                    (to_out): Linear(in_features=128, out_features=128, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=128, out_features=512, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=512, out_features=128, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=128, out_features=384, bias=False)
                    (to_out): Linear(in_features=128, out_features=128, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=128, out_features=512, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=512, out_features=128, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage2): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=512, out_features=256, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=256, out_features=768, bias=False)
                    (to_out): Linear(in_features=256, out_features=256, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=256, out_features=1024, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=1024, out_features=256, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=256, out_features=768, bias=False)
                    (to_out): Linear(in_features=256, out_features=256, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=256, out_features=1024, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=1024, out_features=256, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage3): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=1024, out_features=512, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (1): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (2): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (3): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (4): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (5): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (6): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (7): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (8): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage4): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=2048, out_features=1024, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=1024, out_features=3072, bias=False)
                    (to_out): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=1024, out_features=4096, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=4096, out_features=1024, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=1024, out_features=3072, bias=False)
                    (to_out): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=1024, out_features=4096, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=4096, out_features=1024, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (mlp_head): Sequential(
        (0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=1024, out_features=1000, bias=True)
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-05 11:25:47,062]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-05 11:25:47,062]-[train.py line:162]:        =======  start  training   ======      
[2021-07-05 11:25:47,064]-[train.py line:168]:===Epoch:[0/120]=== 
[2021-07-05 11:27:57,985]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-05 11:27:57,986]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): SwinTransformer(
      (stage1): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=4, dilation=1, padding=0, stride=4)
          (linear): Linear(in_features=48, out_features=128, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=128, out_features=384, bias=False)
                    (to_out): Linear(in_features=128, out_features=128, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=128, out_features=512, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=512, out_features=128, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=128, out_features=384, bias=False)
                    (to_out): Linear(in_features=128, out_features=128, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=128, out_features=512, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=512, out_features=128, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage2): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=512, out_features=256, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=256, out_features=768, bias=False)
                    (to_out): Linear(in_features=256, out_features=256, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=256, out_features=1024, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=1024, out_features=256, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=256, out_features=768, bias=False)
                    (to_out): Linear(in_features=256, out_features=256, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=256, out_features=1024, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=1024, out_features=256, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage3): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=1024, out_features=512, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (1): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (2): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (3): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (4): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (5): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (6): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (7): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
          (8): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=512, out_features=1536, bias=False)
                    (to_out): Linear(in_features=512, out_features=512, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=512, out_features=2048, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=2048, out_features=512, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (stage4): StageModule(
        (patch_partition): PatchMerging(
          (patch_merge): Unfold(kernel_size=2, dilation=1, padding=0, stride=2)
          (linear): Linear(in_features=2048, out_features=1024, bias=True)
        )
        (layers): ModuleList(
          (0): ModuleList(
            (0): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (to_qkv): Linear(in_features=1024, out_features=3072, bias=False)
                    (to_out): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=1024, out_features=4096, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=4096, out_features=1024, bias=True)
                    )
                  )
                )
              )
            )
            (1): SwinBlock(
              (attention_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): WindowAttention(
                    (cyclic_shift): CyclicShift()
                    (cyclic_back_shift): CyclicShift()
                    (to_qkv): Linear(in_features=1024, out_features=3072, bias=False)
                    (to_out): Linear(in_features=1024, out_features=1024, bias=True)
                  )
                )
              )
              (mlp_block): Residual(
                (fn): PreNorm(
                  (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                  (fn): FeedForward(
                    (net): Sequential(
                      (0): Linear(in_features=1024, out_features=4096, bias=True)
                      (1): GELU()
                      (2): Linear(in_features=4096, out_features=1024, bias=True)
                    )
                  )
                )
              )
            )
          )
        )
      )
      (mlp_head): Sequential(
        (0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=1024, out_features=1000, bias=True)
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-05 11:27:57,997]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-05 11:27:57,997]-[train.py line:162]:        =======  start  training   ======      
[2021-07-05 11:27:57,998]-[train.py line:168]:===Epoch:[0/120]=== 
[2021-07-05 16:11:07,331]-[train.py line:149]:Training start,img size is: 608,batchsize is: 1,work number is 4 
[2021-07-05 16:11:07,331]-[train.py line:152]:Build_Model(
  (_Build_Model__yolov4): YOLOv4(
    (backbone): CSPDarknet53(
      (stem_conv): Convolutional(
        (_Convolutional__conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (_Convolutional__activate): Mish()
      )
      (stages): ModuleList(
        (0): CSPFirstStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (1): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(4, 4, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): Convolutional(
              (_Convolutional__conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (2): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(8, 8, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (3): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (5): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (6): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (7): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(16, 16, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (8): Convolutional(
              (_Convolutional__conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
        (4): CSPStage(
          (downsample_conv): Convolutional(
            (_Convolutional__conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv0): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (split_conv1): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
          (blocks_conv): Sequential(
            (0): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (1): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (2): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (3): CSPBlock(
              (block): Sequential(
                (0): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
                (1): Convolutional(
                  (_Convolutional__conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (_Convolutional__activate): Mish()
                )
              )
              (activation): Identity()
              (attention_module): ShuffleAttention(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (gn): GroupNorm(32, 32, eps=1e-05, affine=True)
                (sigmoid): Sigmoid()
              )
            )
            (4): Convolutional(
              (_Convolutional__conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (_Convolutional__norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (_Convolutional__activate): Mish()
            )
          )
          (concat_conv): Convolutional(
            (_Convolutional__conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (_Convolutional__norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (_Convolutional__activate): Mish()
          )
        )
      )
    )
    (spp): SpatialPyramidPooling(
      (head_conv): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (maxpools): ModuleList(
        (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
        (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
        (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
      )
    )
    (panet): PANet(
      (feature_transform3): Conv(
        (conv): Sequential(
          (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (feature_transform4): Conv(
        (conv): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
        )
      )
      (resample5_4): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample4_3): Upsample(
        (upsample): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Upsample(scale_factor=2.0, mode=nearest)
        )
      )
      (resample3_4): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (resample4_5): Downsample(
        (downsample): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (transformer_layer): C3TR(
        (cv1): Conv(
          (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv2): Conv(
          (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (cv3): Conv(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU()
        )
        (m): TransformerBlock(
          (linear): Linear(in_features=256, out_features=256, bias=True)
          (tr): Sequential(
            (0): TransformerLayer(
              (q): Linear(in_features=256, out_features=256, bias=False)
              (k): Linear(in_features=256, out_features=256, bias=False)
              (v): Linear(in_features=256, out_features=256, bias=False)
              (ma): MultiheadAttention(
                (out_proj): _LinearWithBias(in_features=256, out_features=256, bias=True)
              )
              (fc1): Linear(in_features=256, out_features=256, bias=False)
              (fc2): Linear(in_features=256, out_features=256, bias=False)
            )
          )
        )
      )
      (downstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (downstream_conv3): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv4): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
      (upstream_conv5): Sequential(
        (0): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): Conv(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
        (4): Conv(
          (conv): Sequential(
            (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
    (predict_net): PredictNet(
      (predict_conv): ModuleList(
        (0): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(256, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(512, 75, kernel_size=(1, 1), stride=(1, 1))
        )
        (2): Sequential(
          (0): Conv(
            (conv): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): LeakyReLU(negative_slope=0.01)
            )
          )
          (1): Conv2d(1024, 75, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (_Build_Model__head_s): Yolo_head()
  (_Build_Model__head_m): Yolo_head()
  (_Build_Model__head_l): Yolo_head()
) 
[2021-07-05 16:11:07,345]-[train.py line:154]:Train datasets number is : 16551 
[2021-07-05 16:11:07,347]-[train.py line:162]:        =======  start  training   ======      
[2021-07-05 16:11:07,349]-[train.py line:168]:===Epoch:[0/50]=== 
[2021-07-05 16:11:20,036]-[train.py line:235]:  === Epoch:[  0/50],step:[  0/16550],img_size:[608],total_loss:4544.3823|loss_ciou:6.4368|loss_conf:4439.9385|loss_cls:98.0069|lr:0.0000 
[2021-07-05 16:11:22,990]-[train.py line:235]:  === Epoch:[  0/50],step:[ 10/16550],img_size:[608],total_loss:4442.0181|loss_ciou:4.3773|loss_conf:4377.9829|loss_cls:59.6575|lr:0.0000 
[2021-07-05 16:11:25,902]-[train.py line:235]:  === Epoch:[  0/50],step:[ 20/16550],img_size:[512],total_loss:4160.3721|loss_ciou:5.4369|loss_conf:4081.8594|loss_cls:73.0750|lr:0.0000 
[2021-07-05 16:11:28,821]-[train.py line:235]:  === Epoch:[  0/50],step:[ 30/16550],img_size:[352],total_loss:3647.3113|loss_ciou:5.0874|loss_conf:3574.8682|loss_cls:67.3553|lr:0.0000 
[2021-07-05 16:11:31,731]-[train.py line:235]:  === Epoch:[  0/50],step:[ 40/16550],img_size:[480],total_loss:3101.3320|loss_ciou:5.0555|loss_conf:3029.1694|loss_cls:67.1070|lr:0.0000 
[2021-07-05 16:11:34,652]-[train.py line:235]:  === Epoch:[  0/50],step:[ 50/16550],img_size:[480],total_loss:2637.9099|loss_ciou:4.8132|loss_conf:2569.3938|loss_cls:63.7028|lr:0.0000 
[2021-07-05 16:11:37,568]-[train.py line:235]:  === Epoch:[  0/50],step:[ 60/16550],img_size:[544],total_loss:2275.5896|loss_ciou:4.8679|loss_conf:2205.2981|loss_cls:65.4234|lr:0.0000 
[2021-07-05 16:11:40,477]-[train.py line:235]:  === Epoch:[  0/50],step:[ 70/16550],img_size:[544],total_loss:2001.1908|loss_ciou:5.4670|loss_conf:1922.4137|loss_cls:73.3097|lr:0.0000 
[2021-07-05 16:11:43,389]-[train.py line:235]:  === Epoch:[  0/50],step:[ 80/16550],img_size:[384],total_loss:1783.8295|loss_ciou:5.7517|loss_conf:1700.4594|loss_cls:77.6185|lr:0.0000 
[2021-07-05 16:11:46,321]-[train.py line:235]:  === Epoch:[  0/50],step:[ 90/16550],img_size:[576],total_loss:1605.0996|loss_ciou:5.6487|loss_conf:1523.0656|loss_cls:76.3852|lr:0.0000 
[2021-07-05 16:11:49,247]-[train.py line:235]:  === Epoch:[  0/50],step:[100/16550],img_size:[608],total_loss:1458.8430|loss_ciou:5.5357|loss_conf:1378.4647|loss_cls:74.8427|lr:0.0000 
[2021-07-05 16:11:52,182]-[train.py line:235]:  === Epoch:[  0/50],step:[110/16550],img_size:[416],total_loss:1341.6051|loss_ciou:5.6880|loss_conf:1259.1591|loss_cls:76.7581|lr:0.0000 
[2021-07-05 16:11:55,133]-[train.py line:235]:  === Epoch:[  0/50],step:[120/16550],img_size:[320],total_loss:1239.2938|loss_ciou:5.5567|loss_conf:1158.6245|loss_cls:75.1122|lr:0.0000 
[2021-07-05 16:11:58,095]-[train.py line:235]:  === Epoch:[  0/50],step:[130/16550],img_size:[544],total_loss:1154.2587|loss_ciou:5.5905|loss_conf:1073.1562|loss_cls:75.5116|lr:0.0000 
[2021-07-05 16:12:01,095]-[train.py line:235]:  === Epoch:[  0/50],step:[140/16550],img_size:[384],total_loss:1080.5549|loss_ciou:5.6174|loss_conf:999.4968|loss_cls:75.4404|lr:0.0000 
[2021-07-05 16:12:04,073]-[train.py line:235]:  === Epoch:[  0/50],step:[150/16550],img_size:[576],total_loss:1016.7628|loss_ciou:5.6235|loss_conf:935.4686|loss_cls:75.6703|lr:0.0000 
